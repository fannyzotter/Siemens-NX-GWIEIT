//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  C:\Users\HTW\source\repos\Siemens-NX-GWIEIT\showPmi\show_pmi_tes\bin\Debug\CamPmiUI.cs
//
//        This file was generated by the NX Block UI Styler
//        Created by: HTW
//              Version: NX 2412
//              Date: 04-14-2025  (Format: mm-dd-yyyy)
//              Time: 16:27 (Format: hh-mm)
//
//==============================================================================

using System;
using System.Collections.Generic;
using NXOpen;
using NXOpen.BlockStyler;
using NXOpen.Annotations;
using NXOpen.CAM;
using NXOpen.Features;
using NXOpen.Mechatronics;
using static System.Collections.Specialized.BitVector32;
using Operation = NXOpen.CAM.Operation;


public class CamPmiUI
{
    private static Session theSession = null;
    private static UI theUI = null;
    private string theDlxFileName;
    private NXOpen.BlockStyler.BlockDialog theDialog;
    private NXOpen.BlockStyler.ScrolledWindow scrolledWindow;// Block type: Scrolled Window
    private NXOpen.BlockStyler.Tree pmi_cam_tree_list;// Block type: Tree Control
    private NXOpen.BlockStyler.ScrolledWindow scrolledWindow1;// Block type: Scrolled Window
    private NXOpen.BlockStyler.ListBox pmi_list_box;// Block type: List Box
    private NXOpen.BlockStyler.ScrolledWindow scrolledWindow11;// Block type: Scrolled Window
    private NXOpen.BlockStyler.ListBox cam_list_box;// Block type: List Box
    private NXOpen.BlockStyler.Button button_clear;// Block type: Button

    // PMI Objects in dictionaries to store strings and corresponding faces
    private Dictionary<string, Pmi> pmiMap = new Dictionary<string, Pmi>();
    private Dictionary<Pmi, List<Face>> pmiFaceMap = new Dictionary<Pmi, List<Face>>();
    public Dictionary<Pmi, bool> pmiState = new Dictionary<Pmi, bool>();
    public List<Pmi> connectedPmiList = new List<Pmi>();

    // CAM Objects in dictionaries to store strings and corresponding faces
    private Dictionary<string, NXOpen.CAM.Operation> camMap = new Dictionary<string, NXOpen.CAM.Operation>();
    private Dictionary<NXOpen.CAM.Operation, List<Face>> camOperationFaceMap = new Dictionary<NXOpen.CAM.Operation, List<Face>>();
    private Dictionary<NXOpen.CAM.Operation, bool> camState = new Dictionary<NXOpen.CAM.Operation, bool>();

    // List of CAM Operation that are connected to a specific set of PMI 
    private List<NXOpen.CAM.Operation> connectedCamList = new List<NXOpen.CAM.Operation>();
    
    //--private NXOpen.CAM.Operation highlightedOperation;
    
    // all PMI with a List of corresponding CAM Operation
    private Dictionary<Pmi, List<NXOpen.CAM.Operation>> pmiCamOperationMap = new Dictionary<Pmi, List<NXOpen.CAM.Operation>>();

    //--private Pmi highlightedPMI;
    //--private NXObject highlightedObject;
    //--private NXObject selectedObject;
    //--private Feature highlightedFeature;
    private NXOpen.CAM.CAMFeature[] camFeatures;
    private NXOpen.CAM.Operation selectedCam;

    //Constructor
    public CamPmiUI()
    {
        try
        {
            theSession = Session.GetSession();
            theUI = UI.GetUI();
            camFeatures = theSession.Parts.Work.CAMFeatures.ToArray();
            
            string dllDir = System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location);
            theDlxFileName = System.IO.Path.Combine(dllDir, "pmi-cam-3.dlx");

            theDialog = theUI.CreateDialog(theDlxFileName);
            //theDialog.AddApplyHandler(new NXOpen.BlockStyler.BlockDialog.Apply(apply_cb));
            //theDialog.AddOkHandler(new NXOpen.BlockStyler.BlockDialog.Ok(ok_cb));
            theDialog.AddUpdateHandler(new NXOpen.BlockStyler.BlockDialog.Update(update_cb));
            theDialog.AddInitializeHandler(new NXOpen.BlockStyler.BlockDialog.Initialize(initialize_cb));
            theDialog.AddDialogShownHandler(new NXOpen.BlockStyler.BlockDialog.DialogShown(dialogShown_cb));
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            if (ex.Message.Contains("setup"))
            {
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, "No CAM setup found.");
            }
            /*else if (ex.Message.Contains("part"))
            {
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, "No part loaded.");
            }*/
            else
            {
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
            }
        }
    }

   
    //------------------------------------------------------------------------------
    // This method specifies how a shared image is unloaded from memory
    // within NX. This method gives you the capability to unload an
    // internal NX Open application or user  exit from NX. Specify any
    // one of the three constants as a return value to determine the type
    // of unload to perform:
    //
    //
    //    Immediately : unload the library as soon as the automation program has completed
    //    Explicitly  : unload the library from the "Unload Shared Image" dialog
    //    AtTermination : unload the library when the NX session terminates
    //
    //
    // NOTE:  A program which associates NX Open applications with the menubar
    // MUST NOT use this option since it will UNLOAD your NX Open application image
    // from the menubar.
    //------------------------------------------------------------------------------
    //public static int GetUnloadOption(string arg)
    //{
        //return System.Convert.ToInt32(Session.LibraryUnloadOption.Explicitly);
      //  return System.Convert.ToInt32(Session.LibraryUnloadOption.Immediately);
        // return System.Convert.ToInt32(Session.LibraryUnloadOption.AtTermination);
    //}



    //------------------------------------------------------------------------------
    //This method launches the dialog to screen
    //------------------------------------------------------------------------------
    public NXOpen.Selection.Response Launch()
    {
        NXOpen.Selection.Response dialogResponse = NXOpen.Selection.Response.Back;
        try
        {
            dialogResponse = theDialog.Show();
        }
        catch (Exception ex)
        {
            if(!ex.ToString().Contains("NullReferenceException"))
            {
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.Message);
            }
            
        }
        return dialogResponse;
    }

    //------------------------------------------------------------------------------
    //Method Name: Dispose
    //------------------------------------------------------------------------------
    public void Dispose()
    {
        CamHighlighter.ClearCamHighlight(camOperationFaceMap);
        PmiHighlighter.ClearPmiHighlight(pmiFaceMap);
        if (theDialog != null)
        {
            theDialog.Dispose();
            theDialog = null;
        }
    }

    //------------------------------------------------------------------------------
    //Callback Name: initialize_cb
    //------------------------------------------------------------------------------
    public void initialize_cb()
    {
        try
        {
            scrolledWindow = (NXOpen.BlockStyler.ScrolledWindow)theDialog.TopBlock.FindBlock("scrolledWindow");
            pmi_cam_tree_list = (NXOpen.BlockStyler.Tree)theDialog.TopBlock.FindBlock("pmi_cam_tree_list");
            scrolledWindow1 = (NXOpen.BlockStyler.ScrolledWindow)theDialog.TopBlock.FindBlock("scrolledWindow1");
            pmi_list_box = (NXOpen.BlockStyler.ListBox)theDialog.TopBlock.FindBlock("pmi_list_box");
            scrolledWindow11 = (NXOpen.BlockStyler.ScrolledWindow)theDialog.TopBlock.FindBlock("scrolledWindow11");
            cam_list_box = (NXOpen.BlockStyler.ListBox)theDialog.TopBlock.FindBlock("cam_list_box");
            button_clear = (NXOpen.BlockStyler.Button)theDialog.TopBlock.FindBlock("button_clear");
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }

    //------------------------------------------------------------------------------
    //Callback Name: dialogShown_cb
    //This callback is executed just before the dialog launch. Thus any value set 
    //here will take precedence and dialog will be launched showing that value. 
    //------------------------------------------------------------------------------
    public void dialogShown_cb()
    {
        // tree list
        pmi_cam_tree_list.ShowMultipleColumns = false;
        pmi_cam_tree_list.InsertColumn(0, "Name", 150);

        // create all the dictionarys with the PMI and CAM Objects and the corresponding faces
        PmiListBuilder.createPmiLists(pmiMap, pmiFaceMap, pmiState);
        PmiListBuilder.PopulatePmiList(pmi_list_box, pmiMap, pmiState);
        
        CamListBuilder.createCamOperationLists(camFeatures, camMap,camState);
        CamListBuilder.PopulateCamOperationList(cam_list_box, camMap, camState);
        CamListBuilder.PopulateCamWithFaces(camFeatures, camMap, camOperationFaceMap);

        // error message if no PMIs or CAM operations are found
        bool noPMIsFound = pmi_list_box.GetListItems().Length == 0;
        bool noCAMOpsFound = cam_list_box.GetListItems().Length == 0;

        if (noPMIsFound && noCAMOpsFound)
        {
            theUI.NXMessageBox.Show("Notice", NXMessageBox.DialogType.Warning,
                "Neither PMI objects nor CAM operations were found.");
        }
        else if (noPMIsFound)
        {
            theUI.NXMessageBox.Show("Notice", NXMessageBox.DialogType.Warning,
                "No PMI objects were found.");
        }
        else if (noCAMOpsFound)
        {
            theUI.NXMessageBox.Show("Notice", NXMessageBox.DialogType.Warning,
                "No CAM operations were found.");
        }
    }


    //------------------------------------------------------------------------------
    //Callback Name: update_cb
    //Every time the content in the boxes are clicked this update callback is triggered
    //------------------------------------------------------------------------------
    public int update_cb(NXOpen.BlockStyler.UIBlock block)
    {
        try
        {
            if (block == pmi_list_box)
            {
                Pmi selectedPmiKey = PmiListBuilder.GetSelectedPmiFromList(pmi_list_box, pmiMap);
                if (pmiState.ContainsKey(selectedPmiKey))
                {
                    // set the new selected PMI from the clicked listbox
                    NXOpen.Annotations.Pmi selectedPmi = selectedPmiKey;
                    
                    pmiCamOperationMap.Clear();

                    // update the state
                    // if the pmi was marked as selected, unselect it and the other way around
                    pmiState[selectedPmiKey] = !pmiState[selectedPmiKey];

                    // update the pmi_list_box checkboxes 
                    PmiListBuilder.PopulatePmiList(pmi_list_box, pmiMap, pmiState);

                    // highlicht the corresponding faces for the selected PMI
                    PmiHighlighter.ToggleHighlight(pmiState, pmiFaceMap);

                    CamListBuilder.ComparePmiAndCamFaces(pmiState, pmiFaceMap, camOperationFaceMap, connectedCamList, camState, pmiCamOperationMap);
                    CamHighlighter.SelectConnectedCam(pmi_list_box, connectedCamList, camMap);

                    CamListBuilder.PopulateCamOperationList(cam_list_box, camMap, camState);
                    pmi_cam_tree_list = CamListBuilder.ClearTree(pmi_cam_tree_list);
                    CamListBuilder.PopulateConnectedCamList(pmi_cam_tree_list, camMap, connectedCamList, pmiCamOperationMap);
                }
            }
            else if(block == button_clear)
            {
                try
                {
                    pmiCamOperationMap.Clear();
                    pmi_cam_tree_list = CamListBuilder.ClearTree(pmi_cam_tree_list);
                    CamHighlighter.ClearCamHighlight(camOperationFaceMap);
                    PmiHighlighter.ClearPmiHighlight(pmiFaceMap);
                    PmiListBuilder.ClearPmiState(pmiState);
                    PmiListBuilder.PopulatePmiList(pmi_list_box, pmiMap, pmiState);
                    CamListBuilder.ClearCamOperationList(cam_list_box);
                    CamListBuilder.ClearCamState(camState);
                    CamListBuilder.PopulateCamOperationList(cam_list_box, camMap, camState);
                }
                catch (Exception ex)
                {
                    theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Warning, ex.ToString());
                }


            }
            else if (block == cam_list_box)
            {
                if (selectedCam != null)
                {
                    pmiCamOperationMap.Clear();

                    // hightlicht the corresponding faces
                    CamHighlighter.SetCamHighlight(selectedCam, camOperationFaceMap);
                    PmiListBuilder.ComparePmiAndCamFaces(selectedCam, pmiState, pmiFaceMap, camOperationFaceMap, connectedPmiList);

                    //switch states
                    foreach (var pmi in connectedPmiList)
                    {
                        pmiState[pmi] = !pmiState[pmi];
                    }
                    
                    PmiListBuilder.PopulatePmiList(pmi_list_box, pmiMap, pmiState);
                    PmiHighlighter.ToggleHighlight(pmiState, pmiFaceMap);

                    CamListBuilder.ComparePmiAndCamFaces(pmiState, pmiFaceMap, camOperationFaceMap, connectedCamList, camState, pmiCamOperationMap);
                    CamHighlighter.SelectConnectedCam(pmi_list_box, connectedCamList, camMap);
                    CamListBuilder.PopulateCamOperationList(cam_list_box, camMap, camState);

                    pmi_cam_tree_list = CamListBuilder.ClearTree(pmi_cam_tree_list);
                    CamListBuilder.PopulateConnectedCamList(pmi_cam_tree_list, camMap, connectedCamList, pmiCamOperationMap);
                }
            }

        }
        catch (Exception ex)
        {
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }

// TODO: check if this is necessary
    //------------------------------------------------------------------------------
    //Function Name: GetBlockProperties
    //Returns the propertylist of the specified BlockID
    //------------------------------------------------------------------------------
    public PropertyList GetBlockProperties(string blockID)
    {
        PropertyList plist = null;
        try
        {
            plist = theDialog.GetBlockProperties(blockID);
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return plist;
    }

}
