//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  C:\Users\HTW\source\repos\Siemens-NX-GWIEIT\showPmi\show_pmi_tes\bin\Debug\CamPmiUI.cs
//
//        This file was generated by the NX Block UI Styler
//        Created by: HTW
//              Version: NX 2412
//              Date: 04-14-2025  (Format: mm-dd-yyyy)
//              Time: 16:27 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C# source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These imports are needed for the following template code
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using NXOpen;
using NXOpen.BlockStyler;
using NXOpen.Annotations;
using NXOpen.CAM;
using NXOpen.Features;
using NXOpen.Mechatronics;
using static System.Collections.Specialized.BitVector32;
using Operation = NXOpen.CAM.Operation;

//------------------------------------------------------------------------------
//Represents Block Styler application class
//------------------------------------------------------------------------------
public class CamPmiUI
{
    //class members
    private static Session theSession = null;
    private static UI theUI = null;
    private string theDlxFileName;
    private NXOpen.BlockStyler.BlockDialog theDialog;
    private NXOpen.BlockStyler.ScrolledWindow scrolledWindow;// Block type: Scrolled Window
    private NXOpen.BlockStyler.ListBox pmi_list_box;// Block type: List Box
    private NXOpen.BlockStyler.ListBox cam_list_box;// Block type: List Box
    private NXOpen.BlockStyler.ListBox list_box_connected_cam;// Block type: List Box
    //private NXOpen.BlockStyler.Toggle toggleCamPmi;// Block type: Toggle

    // Added
    private Dictionary<string, Pmi> pmiMap = new Dictionary<string, Pmi>();
    private Dictionary<Pmi, List<Face>> pmiFaceMap = new Dictionary<Pmi, List<Face>>();
    private Dictionary<Pmi, bool> pmiState = new Dictionary<Pmi, bool>();

    private Dictionary<string, NXOpen.CAM.Operation> camMap = new Dictionary<string, NXOpen.CAM.Operation>();
    private Dictionary<NXOpen.CAM.Operation, List<Face>> camOperationFaceMap = new Dictionary<NXOpen.CAM.Operation, List<Face>>();

    private List<NXOpen.CAM.Operation> connectedCamList = new List<NXOpen.CAM.Operation>();
    private NXOpen.CAM.Operation highlightedOperation;

    private Pmi highlightedPMI;
    private NXObject highlightedObject;
    private NXObject selectedObject;

    private Feature highlightedFeature;
    private NXOpen.CAM.Operation selectedCam;
    private NCGroup camGroup;
    private CAMSetup camSetup;

    //------------------------------------------------------------------------------
    //Constructor for NX Styler class
    //------------------------------------------------------------------------------
    public CamPmiUI()
    {
        try
        {
            theSession = Session.GetSession();
            theUI = UI.GetUI();

            camSetup = theSession.Parts.Work.CAMSetup;

            string dllDir = System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location);
            theDlxFileName = System.IO.Path.Combine(dllDir, "pmi-cam-2.dlx");

            theDialog = theUI.CreateDialog(theDlxFileName);
            theDialog.AddApplyHandler(new NXOpen.BlockStyler.BlockDialog.Apply(apply_cb));
            theDialog.AddOkHandler(new NXOpen.BlockStyler.BlockDialog.Ok(ok_cb));
            theDialog.AddUpdateHandler(new NXOpen.BlockStyler.BlockDialog.Update(update_cb));
            theDialog.AddInitializeHandler(new NXOpen.BlockStyler.BlockDialog.Initialize(initialize_cb));
            theDialog.AddDialogShownHandler(new NXOpen.BlockStyler.BlockDialog.DialogShown(dialogShown_cb));
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }

   
    //------------------------------------------------------------------------------
    // This method specifies how a shared image is unloaded from memory
    // within NX. This method gives you the capability to unload an
    // internal NX Open application or user  exit from NX. Specify any
    // one of the three constants as a return value to determine the type
    // of unload to perform:
    //
    //
    //    Immediately : unload the library as soon as the automation program has completed
    //    Explicitly  : unload the library from the "Unload Shared Image" dialog
    //    AtTermination : unload the library when the NX session terminates
    //
    //
    // NOTE:  A program which associates NX Open applications with the menubar
    // MUST NOT use this option since it will UNLOAD your NX Open application image
    // from the menubar.
    //------------------------------------------------------------------------------
    public static int GetUnloadOption(string arg)
    {
        //return System.Convert.ToInt32(Session.LibraryUnloadOption.Explicitly);
        return System.Convert.ToInt32(Session.LibraryUnloadOption.Immediately);
        // return System.Convert.ToInt32(Session.LibraryUnloadOption.AtTermination);
    }

    //------------------------------------------------------------------------------
    // Following method cleanup any housekeeping chores that may be needed.
    // This method is automatically called by NX.
    //------------------------------------------------------------------------------
    public static void UnloadLibrary(string arg)
    {
        try
        {
            //---- Enter your code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }

    //------------------------------------------------------------------------------
    //This method launches the dialog to screen
    //------------------------------------------------------------------------------
    public NXOpen.BlockStyler.BlockDialog.DialogResponse Launch()
    {
        NXOpen.BlockStyler.BlockDialog.DialogResponse dialogResponse = NXOpen.BlockStyler.BlockDialog.DialogResponse.Invalid;
        try
        {
            dialogResponse = theDialog.Launch();
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return dialogResponse;
    }

    //------------------------------------------------------------------------------
    //Method Name: Dispose
    //------------------------------------------------------------------------------
    public void Dispose()
    {
        CamHighlighter.ClearCamHighlight(camOperationFaceMap);
        PmiHighlighter.ClearPmiHighlight(pmiFaceMap);
        if (theDialog != null)
        {
            theDialog.Dispose();
            theDialog = null;
        }
    }

    //------------------------------------------------------------------------------
    //---------------------Block UI Styler Callback Functions--------------------------
    //------------------------------------------------------------------------------

    //------------------------------------------------------------------------------
    //Callback Name: initialize_cb
    //------------------------------------------------------------------------------
    public void initialize_cb()
    {
        try
        {
            scrolledWindow = (NXOpen.BlockStyler.ScrolledWindow)theDialog.TopBlock.FindBlock("scrolledWindow");
            pmi_list_box = (NXOpen.BlockStyler.ListBox)theDialog.TopBlock.FindBlock("pmi_list_box"); 
            list_box_connected_cam = (NXOpen.BlockStyler.ListBox)theDialog.TopBlock.FindBlock("list_box_connected_cam");
            cam_list_box = (NXOpen.BlockStyler.ListBox)theDialog.TopBlock.FindBlock("cam_list_box");
            //toggleCamPmi = (NXOpen.BlockStyler.Toggle)theDialog.TopBlock.FindBlock("toggleCamPmi");
            //------------------------------------------------------------------------------
            //Registration of ListBox specific callbacks
            //------------------------------------------------------------------------------
            //pmi_list_box.SetAddHandler(new NXOpen.BlockStyler.ListBox.AddCallback(AddCallback));

            //pmi_list_box.SetDeleteHandler(new NXOpen.BlockStyler.ListBox.DeleteCallback(DeleteCallback));

            //cam_list_box.SetAddHandler(new NXOpen.BlockStyler.ListBox.AddCallback(AddCallback));

            //cam_list_box.SetDeleteHandler(new NXOpen.BlockStyler.ListBox.DeleteCallback(DeleteCallback));

            //------------------------------------------------------------------------------
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }

    //------------------------------------------------------------------------------
    //Callback Name: dialogShown_cb
    //This callback is executed just before the dialog launch. Thus any value set 
    //here will take precedence and dialog will be launched showing that value. 
    //------------------------------------------------------------------------------
    public void dialogShown_cb()
    {
        PmiListBuilder.createPmiLists(pmiMap, pmiFaceMap, pmiState);
        PmiListBuilder.PopulatePmiList(pmi_list_box, pmiMap, pmiState);
        
        CamListBuilder.PopulateCamOperationList(cam_list_box, camMap, camSetup);
        CamListBuilder.PopulateCamWithFaces(camSetup, camMap, camOperationFaceMap);

        
        // initialize pmiStates: in the beginning all PMIs are not selected

        // error message if no PMIs or CAM operations are found
        bool noPMIsFound = pmi_list_box.GetListItems().Length == 0;
        bool noCAMOpsFound = cam_list_box.GetListItems().Length == 0;

        if (noPMIsFound && noCAMOpsFound)
        {
            theUI.NXMessageBox.Show("Notice", NXMessageBox.DialogType.Warning,
                "Neither PMI objects nor CAM operations were found.");
        }
        else if (noPMIsFound)
        {
            theUI.NXMessageBox.Show("Notice", NXMessageBox.DialogType.Warning,
                "No PMI objects were found.");
        }
        else if (noCAMOpsFound)
        {
            theUI.NXMessageBox.Show("Notice", NXMessageBox.DialogType.Warning,
                "No CAM operations were found.");
        }
    }

    //------------------------------------------------------------------------------
    //Callback Name: apply_cb
    //------------------------------------------------------------------------------
    public int apply_cb()
    {
        int errorCode = 0;
        try
        {
            CamHighlighter.ClearCamHighlight(camOperationFaceMap);
            PmiHighlighter.ClearPmiHighlight(pmiFaceMap);
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, "hier 1");

            //---- Enter your exception handling code here -----
            errorCode = 1;
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return errorCode;
    }

    //------------------------------------------------------------------------------
    //Callback Name: update_cb
    //------------------------------------------------------------------------------
    public int update_cb(NXOpen.BlockStyler.UIBlock block)
    {
        try
        {
            if (block == pmi_list_box)
            {
                Pmi selectedPmiKey = PmiListBuilder.GetSelectedPmiFromList(pmi_list_box, pmiMap);
                if (pmiState.ContainsKey(selectedPmiKey))
                {
                    NXOpen.Annotations.Pmi selectedPmi = selectedPmiKey;
                    
                    // update the state
                    // if the pmi was marked as selected, unselect it and the other way around
                    pmiState[selectedPmiKey] = !pmiState[selectedPmiKey];
                    PmiListBuilder.PopulatePmiList(pmi_list_box, pmiMap, pmiState); // updates list

                    PmiHighlighter.ToggleHighlight(pmiState, pmiFaceMap);

                    CamListBuilder.ComparePmiAndCamFaces(pmiState, pmiFaceMap, camOperationFaceMap, connectedCamList);
                    CamListBuilder.PopulateConnectedCamList(list_box_connected_cam, camMap, connectedCamList);

                    CamHighlighter.SelectConnectedCam(pmi_list_box, connectedCamList, camMap);
                }
            }
            else if (block == cam_list_box)
            {
                var selectedCam = CamListBuilder.GetSelectedCam(cam_list_box, camMap);
                if (selectedCam != null)
                {
                    CamHighlighter.SetCamHighlight(selectedCam, camOperationFaceMap);
                }
            }
        }
        catch (Exception ex)
        {
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }

    //------------------------------------------------------------------------------
    //Callback Name: ok_cb
    //------------------------------------------------------------------------------
    public int ok_cb()
    {
        int errorCode = 0;
        try
        {
            CamHighlighter.ClearCamHighlight(camOperationFaceMap);
            PmiHighlighter.ClearPmiHighlight(pmiFaceMap);
            //errorCode = apply_cb();
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            errorCode = 1;
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return errorCode;
    }
    //------------------------------------------------------------------------------
    //ListBox specific callbacks
    //------------------------------------------------------------------------------
    //public int  AddCallback (NXOpen.BlockStyler.ListBox list_box)
    //{
    //}

    //public int  DeleteCallback(NXOpen.BlockStyler.ListBox list_box)
    //{
    //}

    //------------------------------------------------------------------------------

    //------------------------------------------------------------------------------
    //Function Name: GetBlockProperties
    //Returns the propertylist of the specified BlockID
    //------------------------------------------------------------------------------
    public PropertyList GetBlockProperties(string blockID)
    {
        PropertyList plist = null;
        try
        {
            plist = theDialog.GetBlockProperties(blockID);
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return plist;
    }

}
